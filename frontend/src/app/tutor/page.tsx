'use client'

import React, { useState, useRef, useEffect } from 'react'
import { useAuth } from '@/contexts/AuthContext'
import { ProtectedRoute } from '@/components/auth/ProtectedRoute'
import { Header } from '@/components/layout/Header'
import { Button } from '@/components/ui/button'
import { 
  Send, 
  Bot, 
  User,
  Sparkles,
  BookOpen,
  Lightbulb,
  Code,
  HelpCircle,
  Mic,
  Paperclip,
  MoreVertical,
  RefreshCw,
  Copy,
  ThumbsUp,
  ThumbsDown,
  Star,
  MessageCircle,
  Clock,
  Loader2
} from 'lucide-react'

interface Message {
  id: string
  type: 'user' | 'bot'
  content: string
  timestamp: Date
  isTyping?: boolean
}

const TutorPage: React.FC = () => {
  const { user } = useAuth()
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'bot',
      content: `Xin ch√†o ${user?.username || 'b·∫°n'}! T√¥i l√† AI Tutor c·ªßa LearnSmart. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ Gi·∫£i th√≠ch c√°c kh√°i ni·ªám kh√≥ hi·ªÉu\n‚Ä¢ ƒê∆∞a ra v√≠ d·ª• th·ª±c t·∫ø\n‚Ä¢ H∆∞·ªõng d·∫´n gi·∫£i quy·∫øt b√†i t·∫≠p\n‚Ä¢ ƒê·ªÅ xu·∫•t t√†i li·ªáu h·ªçc t·∫≠p\n‚Ä¢ Tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi h·ªçc t·∫≠p\n\nH√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ b·∫°n mu·ªën h·ªçc!`,
      timestamp: new Date()
    }
  ])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)

  const quickQuestions = [
    {
      icon: Code,
      title: "Gi·∫£i th√≠ch JavaScript closures",
      category: "Programming"
    },
    {
      icon: BookOpen,
      title: "React hooks ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?",
      category: "Frontend"
    },
    {
      icon: Lightbulb,
      title: "S·ª± kh√°c bi·ªát gi·ªØa Git v√† GitHub?",
      category: "Tools"
    },
    {
      icon: HelpCircle,
      title: "C√°ch t·ªëi ∆∞u h√≥a performance website?",
      category: "Optimization"
    }
  ]

  const suggestions = [
    "Explain this code to me",
    "Give me an example",
    "What are best practices for this?",
    "Can you suggest resources to learn more?",
    "Help me debug this issue",
    "What's the difference between X and Y?"
  ]

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage.trim(),
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsLoading(true)
    setIsTyping(true)

    // Add typing indicator
    const typingMessage: Message = {
      id: 'typing',
      type: 'bot',
      content: '',
      timestamp: new Date(),
      isTyping: true
    }
    setMessages(prev => [...prev, typingMessage])

    // Simulate AI response
    setTimeout(() => {
      setMessages(prev => prev.filter(msg => msg.id !== 'typing'))
      
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: generateAIResponse(userMessage.content),
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, botResponse])
      setIsLoading(false)
      setIsTyping(false)
    }, 2000)
  }

  const generateAIResponse = (userInput: string): string => {
    // Simple mock AI responses
    const responses = [
      `T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi v·ªÅ "${userInput}". ƒê√¢y l√† m·ªôt c√¢u h·ªèi r·∫•t hay!\n\nƒê·ªÉ gi·∫£i th√≠ch chi ti·∫øt:\n\n1. **Kh√°i ni·ªám c∆° b·∫£n**: ƒê√¢y l√† n·ªÅn t·∫£ng b·∫°n c·∫ßn hi·ªÉu tr∆∞·ªõc\n2. **V√≠ d·ª• th·ª±c t·∫ø**: H√£y xem v√≠ d·ª• n√†y ƒë·ªÉ hi·ªÉu r√µ h∆°n\n3. **·ª®ng d·ª•ng**: B·∫°n c√≥ th·ªÉ √°p d·ª•ng nh∆∞ th·∫ø n√†y\n\nB·∫°n c√≥ mu·ªën t√¥i gi·∫£i th√≠ch s√¢u h∆°n v·ªÅ ph·∫ßn n√†o kh√¥ng?`,
      
      `C√¢u h·ªèi v·ªÅ "${userInput}" n√†y kh√° ph·ªï bi·∫øn! T√¥i s·∫Ω gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc:\n\nüìö **L√Ω thuy·∫øt**: Tr∆∞·ªõc ti√™n, h√£y hi·ªÉu kh√°i ni·ªám\nüí° **V√≠ d·ª•**: ƒê√¢y l√† c√°ch n√≥ ho·∫°t ƒë·ªông trong th·ª±c t·∫ø\nüîß **Th·ª±c h√†nh**: B·∫°n c√≥ th·ªÉ th·ª≠ l√†m theo c√°c b∆∞·ªõc n√†y\n\nC√≥ g√¨ kh√≥ hi·ªÉu th√¨ h·ªèi ti·∫øp nh√©!`,
      
      `R·∫•t t·ªët khi b·∫°n h·ªèi v·ªÅ "${userInput}"!\n\nƒê√¢y l√† c√°ch t√¥i khuy√™n b·∫°n ti·∫øp c·∫≠n:\n\n‚Ä¢ **B∆∞·ªõc 1**: N·∫Øm v·ªØng ki·∫øn th·ª©c c∆° b·∫£n\n‚Ä¢ **B∆∞·ªõc 2**: Xem c√°c v√≠ d·ª• minh h·ªça\n‚Ä¢ **B∆∞·ªõc 3**: Th·ª±c h√†nh v·ªõi b√†i t·∫≠p ƒë∆°n gi·∫£n\n‚Ä¢ **B∆∞·ªõc 4**: √Åp d·ª•ng v√†o d·ª± √°n th·ª±c t·∫ø\n\nB·∫°n mu·ªën t√¥i gi√∫p v·ªõi b∆∞·ªõc n√†o tr∆∞·ªõc?`
    ]
    
    return responses[Math.floor(Math.random() * responses.length)]
  }

  const handleQuickQuestion = (question: string) => {
    setInputMessage(question)
    inputRef.current?.focus()
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const copyMessage = (content: string) => {
    navigator.clipboard.writeText(content)
  }

  const likeMessage = (messageId: string) => {
    // Handle like functionality
    console.log('Liked message:', messageId)
  }

  const dislikeMessage = (messageId: string) => {
    // Handle dislike functionality
    console.log('Disliked message:', messageId)
  }

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        <Header />
        
        <main className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="grid lg:grid-cols-4 gap-8 h-[calc(100vh-12rem)]">
            {/* Sidebar */}
            <div className="lg:col-span-1 space-y-6">
              {/* AI Info */}
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <Bot className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900 dark:text-white">AI Tutor</h3>
                    <div className="flex items-center text-sm">
                      <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                      <span className="text-green-600 dark:text-green-400">Online</span>
                    </div>
                  </div>
                </div>
                
                <div className="space-y-2 text-sm text-gray-600 dark:text-gray-300">
                  <div className="flex items-center">
                    <Sparkles className="w-4 h-4 mr-2 text-yellow-500" />
                    <span>AI-powered learning assistant</span>
                  </div>
                  <div className="flex items-center">
                    <Clock className="w-4 h-4 mr-2 text-blue-500" />
                    <span>Ph·∫£n h·ªìi trong v√†i gi√¢y</span>
                  </div>
                  <div className="flex items-center">
                    <MessageCircle className="w-4 h-4 mr-2 text-green-500" />
                    <span>H·ªó tr·ª£ ƒëa ng√¥n ng·ªØ</span>
                  </div>
                </div>
              </div>

              {/* Quick Questions */}
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
                <h4 className="font-semibold text-gray-900 dark:text-white mb-4">
                  C√¢u h·ªèi ph·ªï bi·∫øn
                </h4>
                <div className="space-y-2">
                  {quickQuestions.map((question, index) => (
                    <button
                      key={index}
                      onClick={() => handleQuickQuestion(question.title)}
                      className="w-full text-left p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors group"
                    >
                      <div className="flex items-start space-x-3">
                        <question.icon className="w-4 h-4 mt-1 text-gray-400 group-hover:text-blue-500" />
                        <div>
                          <p className="text-sm font-medium text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400">
                            {question.title}
                          </p>
                          <p className="text-xs text-gray-500 dark:text-gray-400">
                            {question.category}
                          </p>
                        </div>
                      </div>
                    </button>
                  ))}
                </div>
              </div>

              {/* Usage Stats */}
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
                <h4 className="font-semibold text-gray-900 dark:text-white mb-4">
                  Th·ªëng k√™ h√¥m nay
                </h4>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600 dark:text-gray-300">C√¢u h·ªèi ƒë√£ h·ªèi</span>
                    <span className="font-medium text-gray-900 dark:text-white">15</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600 dark:text-gray-300">Th·ªùi gian chat</span>
                    <span className="font-medium text-gray-900 dark:text-white">45 ph√∫t</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600 dark:text-gray-300">Ch·ªß ƒë·ªÅ h·ªçc</span>
                    <span className="font-medium text-gray-900 dark:text-white">3</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Chat Area */}
            <div className="lg:col-span-3 bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 flex flex-col">
              {/* Chat Header */}
              <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <Bot className="w-4 h-4 text-white" />
                  </div>
                  <div>
                    <h3 className="font-medium text-gray-900 dark:text-white">AI Tutor</h3>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      S·∫µn s√†ng gi√∫p b·∫°n h·ªçc t·∫≠p
                    </p>
                  </div>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Button variant="ghost" size="sm">
                    <RefreshCw className="w-4 h-4" />
                  </Button>
                  <Button variant="ghost" size="sm">
                    <MoreVertical className="w-4 h-4" />
                  </Button>
                </div>
              </div>

              {/* Messages */}
              <div className="flex-1 overflow-y-auto p-4 space-y-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div className={`flex ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'} items-start space-x-2 max-w-3xl`}>
                      {/* Avatar */}
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                        message.type === 'user' 
                          ? 'bg-blue-500 ml-2' 
                          : 'bg-gradient-to-br from-blue-500 to-purple-600 mr-2'
                      }`}>
                        {message.type === 'user' ? (
                          <User className="w-4 h-4 text-white" />
                        ) : (
                          <Bot className="w-4 h-4 text-white" />
                        )}
                      </div>

                      {/* Message Bubble */}
                      <div className={`rounded-lg px-4 py-2 ${
                        message.type === 'user'
                          ? 'bg-blue-500 text-white'
                          : 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white'
                      }`}>
                        {message.isTyping ? (
                          <div className="flex items-center space-x-1">
                            <div className="flex space-x-1">
                              <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse"></div>
                              <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse" style={{animationDelay: '0.2s'}}></div>
                              <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse" style={{animationDelay: '0.4s'}}></div>
                            </div>
                            <span className="text-sm text-gray-500 dark:text-gray-400 ml-2">AI ƒëang tr·∫£ l·ªùi...</span>
                          </div>
                        ) : (
                          <>
                            <div className="whitespace-pre-wrap">{message.content}</div>
                            <div className={`text-xs mt-1 ${
                              message.type === 'user' 
                                ? 'text-blue-100' 
                                : 'text-gray-500 dark:text-gray-400'
                            }`}>
                              {message.timestamp.toLocaleTimeString('vi-VN', { 
                                hour: '2-digit', 
                                minute: '2-digit' 
                              })}
                            </div>
                          </>
                        )}
                      </div>

                      {/* Message Actions */}
                      {!message.isTyping && message.type === 'bot' && (
                        <div className="flex flex-col space-y-1 ml-2">
                          <button
                            onClick={() => copyMessage(message.content)}
                            className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                            title="Copy message"
                          >
                            <Copy className="w-3 h-3" />
                          </button>
                          <button
                            onClick={() => likeMessage(message.id)}
                            className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded text-gray-400 hover:text-green-600"
                            title="Like"
                          >
                            <ThumbsUp className="w-3 h-3" />
                          </button>
                          <button
                            onClick={() => dislikeMessage(message.id)}
                            className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded text-gray-400 hover:text-red-600"
                            title="Dislike"
                          >
                            <ThumbsDown className="w-3 h-3" />
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
                <div ref={messagesEndRef} />
              </div>

              {/* Quick Suggestions */}
              {messages.length <= 1 && (
                <div className="px-4 py-2 border-t border-gray-200 dark:border-gray-700">
                  <p className="text-xs text-gray-500 dark:text-gray-400 mb-2">G·ª£i √Ω c√¢u h·ªèi:</p>
                  <div className="flex flex-wrap gap-2">
                    {suggestions.slice(0, 3).map((suggestion, index) => (
                      <button
                        key={index}
                        onClick={() => setInputMessage(suggestion)}
                        className="px-3 py-1 text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                      >
                        {suggestion}
                      </button>
                    ))}
                  </div>
                </div>
              )}

              {/* Input Area */}
              <div className="p-4 border-t border-gray-200 dark:border-gray-700">
                <div className="flex items-end space-x-2">
                  <div className="flex-1 relative">
                    <input
                      ref={inputRef}
                      type="text"
                      value={inputMessage}
                      onChange={(e) => setInputMessage(e.target.value)}
                      onKeyPress={handleKeyPress}
                      placeholder="H·ªèi AI tutor b·∫•t k·ª≥ c√¢u h·ªèi n√†o..."
                      className="w-full px-4 py-3 pr-12 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white resize-none"
                      disabled={isLoading}
                    />
                    <div className="absolute right-2 top-1/2 transform -translate-y-1/2 flex space-x-1">
                      <button className="p-1 hover:bg-gray-100 dark:hover:bg-gray-600 rounded text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
                        <Paperclip className="w-4 h-4" />
                      </button>
                      <button className="p-1 hover:bg-gray-100 dark:hover:bg-gray-600 rounded text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
                        <Mic className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                  
                  <Button
                    onClick={handleSendMessage}
                    disabled={!inputMessage.trim() || isLoading}
                    className="px-4 py-3"
                  >
                    {isLoading ? (
                      <Loader2 className="w-4 h-4 animate-spin" />
                    ) : (
                      <Send className="w-4 h-4" />
                    )}
                  </Button>
                </div>
                
                <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                  AI c√≥ th·ªÉ m·∫Øc l·ªói. H√£y ki·ªÉm tra th√¥ng tin quan tr·ªçng.
                </p>
              </div>
            </div>
          </div>
        </main>
      </div>
    </ProtectedRoute>
  )
}

export default TutorPage